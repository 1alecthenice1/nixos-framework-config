#!/bin/bash
# Local NixOS Framework Configuration Test
# Tests the complete build process locally

set -euo pipefail

REPO_DIR="/home/alma/Downloads/nixos-framework-config"
TEST_DIR="/tmp/nixos-framework-test"

echo "üß™ NixOS Framework Configuration Test"
echo "====================================="
echo ""

cd "$REPO_DIR"

echo "1Ô∏è‚É£ Testing flake validation..."
echo "------------------------------"
if nix flake check; then
    echo "‚úÖ Flake validation passed"
else
    echo "‚ùå Flake validation failed"
    exit 1
fi

echo ""
echo "2Ô∏è‚É£ Testing configuration build..."
echo "---------------------------------"
if nix build .#nixosConfigurations.framework.config.system.build.toplevel --out-link /tmp/nixos-test-result; then
    echo "‚úÖ Configuration build successful"
    
    # Check build size
    SIZE=$(du -sh /tmp/nixos-test-result | cut -f1)
    echo "üì¶ Build size: $SIZE"
    
    # Check some key components
    echo "üîç Checking build components..."
    if [[ -e /tmp/nixos-test-result/sw/bin/hyprland ]]; then
        echo "‚úÖ Hyprland found in build"
    fi
    
    if [[ -e /tmp/nixos-test-result/etc/systemd/system/NetworkManager.service ]]; then
        echo "‚úÖ NetworkManager service found"
    fi
    
    if [[ -e /tmp/nixos-test-result/sw/bin/tpm2_* ]]; then
        echo "‚úÖ TPM tools found in build"
    fi
    
else
    echo "‚ùå Configuration build failed"
    exit 1
fi

echo ""
echo "3Ô∏è‚É£ Testing disko configuration..."
echo "---------------------------------"
if nix build .#diskoConfigurations.framework --out-link /tmp/disko-test-result; then
    echo "‚úÖ Disko configuration build successful"
else
    echo "‚ùå Disko configuration build failed"
    exit 1
fi

echo ""
echo "4Ô∏è‚É£ Testing individual modules..."
echo "--------------------------------"

# Test each module individually
MODULES=("security" "users" "tpm" "boot" "desktop" "networking" "hardware" "zram")

for module in "${MODULES[@]}"; do
    echo -n "Testing $module module... "
    if nix-instantiate --eval -E "import ./modules/$module { config = {}; lib = (import <nixpkgs> {}).lib; pkgs = import <nixpkgs> {}; }" >/dev/null 2>&1; then
        echo "‚úÖ"
    else
        echo "‚ùå"
    fi
done

echo ""
echo "5Ô∏è‚É£ Testing VM build..."
echo "----------------------"
if nix build .#nixosConfigurations.framework.config.system.build.vm --out-link /tmp/nixos-vm-result; then
    echo "‚úÖ VM build successful"
    echo "üñ•Ô∏è  VM script created at /tmp/nixos-vm-result/bin/run-nixos-vm"
else
    echo "‚ùå VM build failed"
fi

echo ""
echo "6Ô∏è‚É£ Configuration Summary..."
echo "---------------------------"
echo "üèóÔ∏è  Build directory: /tmp/nixos-test-result"
echo "üíæ Disko config: /tmp/disko-test-result"
echo "üñ•Ô∏è  VM script: /tmp/nixos-vm-result/bin/run-nixos-vm"

echo ""
echo "7Ô∏è‚É£ System Information..."
echo "------------------------"
echo "üè∑Ô∏è  Hostname: $(nix eval .#nixosConfigurations.framework.config.networking.hostName --raw)"
echo "üßë User: $(nix eval .#nixosConfigurations.framework.config.users.users --json | jq -r 'keys[]' | grep -v root | head -1)"
echo "üêß Kernel: $(nix eval .#nixosConfigurations.framework.config.boot.kernelPackages.kernel.version --raw)"

echo ""
echo "üéâ ALL TESTS COMPLETED SUCCESSFULLY!"
echo "===================================="
echo ""
echo "üìã Summary:"
echo "   ‚úÖ Flake validation passed"
echo "   ‚úÖ Configuration builds successfully"
echo "   ‚úÖ Disko configuration works"
echo "   ‚úÖ All modules load correctly"
echo "   ‚úÖ VM build successful"
echo ""
echo "üöÄ Ready for deployment to Framework laptop!"
echo ""
echo "üí° Next steps:"
echo "   1. Boot Framework laptop with NixOS installer"
echo "   2. Run: sudo nix run github:nix-community/disko -- --mode disko ./disko/framework-luks-btrfs.nix"
echo "   3. Run: sudo nixos-install --flake .#framework"
echo "   4. Reboot and enjoy your configured Framework!"
